import re
import os
import subprocess
import requests


def find_subdomains(domain, output_file):
    try:
        result = subprocess.check_output(['docker', 'run', '-v', f'{os.getcwd()}:/output', 'projectdiscovery/subfinder:latest', '-d', domain], text=True)
        subdomains = result.strip().split('\n')
        with open(output_file, 'w') as file:
            for subdomain in subdomains:
                file.write(subdomain + '\n')
        return subdomains
    except subprocess.CalledProcessError as e:
        print(f"Error running subfinder: {e}")
        return []

def is_subdomain_reachable(subdomain):
    try:
        response = requests.get(f"http://{subdomain}")
        return response.status_code < 400
    except requests.RequestException:
        return False

def scan_for_vulnerabilities(target):
    try:
        command = ['nmap', '-vv', '-p-', '-sV', '--script', 'vuln',target]
        result = subprocess.check_output(command, text=True)
    
        
        # Extract vulnerabilities

        vulnerabilities = re.findall(r"CVE: (.+)", result)
        # Print vulnerabilities
        print("Vulnerabilities:", vulnerabilities)
        
        # Fetch CVEs for each vulnerability
        cves = []
        for vulnerability in vulnerabilities:
            cve_info = fetch_cve_info(vulnerability)
            cves.append(cve_info)
        
        return cves
    except subprocess.TimeoutExpired:
        print("The command timed out...")
        return "Vulnerability scanning failed."
    except Exception as e:
        print(f"An error occurred: {e}")

def fetch_cve_info(vulnerability):
    base_url = "https://services.nvd.nist.gov/rest/json/cvehistory/2.0"
    cve_info = []
    try:
        # Replace spaces in the vulnerability name with '+' for the API request
        vulnerability_queries = [vuln.replace('  ','+') for vuln in vulnerabilities]
        url = f"{base_url}cve/{','.join(vulnerability_queries)}"
        response = requests.get(url)
        data = response.json()

        if 'result' in data and 'CVE_Items' in data['result']:
            cve_items = data['result']['CVE_Items']
            for cve_item in cve_items:
                cve_id = cve_item['cve']['CVE_data_meta']['ID']
                description = cve_item['cve']['description']['description_data'][0]['value']
                cve_info.append(f"{cve_id}: {description}")

        return cve_info

    except requests.RequestException as e:
        print(f"Error fetching CVE information: {e}")
        return ["Error fetching CVE information"]
   
def main():
    domain_to_search = input("Enter Domain Name")
    output_file = "v.txt"

    if not domain_to_search or not output_file:
        print("Invalid input. Exiting.")
        return

    subdomains = find_subdomains(domain_to_search, output_file)

    if subdomains:
        print("Subdomains:", subdomains)

        for subdomain in subdomains:
            print(f"\nChecking if {subdomain} is reachable...")
            if is_subdomain_reachable(subdomain):
                print(f"{subdomain} is reachable. Checking vulnerabilities...")
                vulnerabilities_result = scan_for_vulnerabilities(subdomain)
                print("CVE Information:", vulnerabilities_result)
            else:
                print(f"{subdomain} is not reachable.")
    else:
        print("No subdomains found. Exiting.")

if __name__ == "__main__":
    main()
